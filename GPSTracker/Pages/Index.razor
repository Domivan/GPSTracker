@inject IJSRuntime jsRuntime
@using BrowserInterop.Extensions
@using BrowserInterop.Geolocation

@page "/"

<PageTitle>Index</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

<SurveyPrompt Title="How is Blazor working for you?" />

<h1>GPS Tracking</h1>

<button type="button" @onclick="@GetGeolocation">Get Location</button>
<button type="button" @onclick="@StartWatch">Start Watching</button>
<button type="button" @onclick="@StopWatch">Stop Watching</button>

<h3>Your Position</h3>

@if (currentPosition != null)
{
    <div>
        <ul>
            <li>Latitude: @currentPosition.Coords.Latitude</li>
            <li>Longitude: @currentPosition.Coords.Longitude </li>
            <li>Altitude: @currentPosition.Coords.Altitude </li>
            <li>Accuracy: @currentPosition.Coords.Accuracy </li>
            <li>Altitude Accuracy: @currentPosition.Coords.AltitudeAccuracy </li>
            <li>Heading: @currentPosition.Coords.Heading </li>
            <li>Speed: @currentPosition.Coords.Speed </li>
        </ul>
    </div>
}

<h3>Your Position Tracking</h3>

@if (positionHistory.Any())
{
    var last = positionHistory.Last();
    <div>
        <ul>
            <li>Latitude: @last.Coords.Latitude</li>
            <li>Longitude: @last.Coords.Longitude </li>
            <li>Speed: @last.Coords.Speed</li>
        </ul>
    </div>
}

@code{
    private WindowNavigatorGeolocation geolocationWrapper;
    private GeolocationPosition currentPosition;
    private List<GeolocationPosition> positionHistory = new List<GeolocationPosition>();
    private IAsyncDisposable watcher;

    protected override async Task OnInitializedAsync()
    {
        var window = await jsRuntime.Window();
        var navigator = await window.Navigator();
        geolocationWrapper = navigator.Geolocation;
    }

    public async Task GetGeolocation()
    {
        currentPosition = (await geolocationWrapper.GetCurrentPosition(new PositionOptions()
        {
            EnableHighAccuracy = true,
            MaximumAgeTimeSpan = TimeSpan.FromHours(1),
            TimeoutTimeSpan = TimeSpan.FromMinutes(1)
        })).Location;
    }

    private async Task StartWatch()
    {
        watcher = await geolocationWrapper.WatchPosition(async (p) =>
        {
            positionHistory.Add(p.Location);
            await InvokeAsync(StateHasChanged);
        });
    }

    private async Task StopWatch()
    {
        await watcher.DisposeAsync();
        watcher = null;
    }

    public async ValueTask DisposeAsync()
    {
        await StopWatch();
    }
}